<?php
// $Id: ajax_slideshow.module,v 1.8 2010/08/20 19:54:23 udig Exp $
/**
 * @file AJAX Slideshow
 */

define(AJAX_SLIDESHOW_PERM_ADMIN, 'administer ajax slideshow');

/**
 * Implementation of hook_help()
 */
function ajax_slideshow_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ajax_slideshow':
    return '<p>'. t('Enables slideshow using AJAX. For more information, please see the readme file inside the module directory') .'</p>';
  }
}

/**
 * Implementation of hook_perm()
 */
function ajax_slideshow_perm() {
  return array(AJAX_SLIDESHOW_PERM_ADMIN);
}

/**
 * Attaching the slideshow view 
 */
function ajax_slideshow_views_api() {

  return array('api' => 2, 'path' => drupal_get_path('module', 'ajax_slideshow').'/includes' );
}

/**
* Implementation of hook_menu().
*/
function ajax_slideshow_menu() {
  $items['photos/get/photos'] = array(
    'page callback' => 'ajax_slideshow_get_node_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['slideshow-front'] = array(
    'page callback' => 'ajax_slideshow_view',
    'page arguments' => array(false),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['admin/settings/ajax_slideshow'] = array(
    'title' => 'AJAX Slideshow',
    'description' => 'Setup the AJAX slideshow.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajax_slideshow_admin_settings'),
    'access arguments' => array(AJAX_SLIDESHOW_PERM_ADMIN),
    'type' => MENU_NORMAL_ITEM
  );
  
  return $items;
}

/**
 * Admin settings form function
 * @return admin settings form
 */
function ajax_slideshow_admin_settings() {
  $form = array();

  $form['ajax_slideshow_effect'] = array(
    '#type' => 'select',
    '#title' => t('Slideshow Effect'),
    '#default_value' => variable_get('ajax_slideshow_effect','myfade'),
    '#options' => array(
      'myfade' => t('Fade'),
      'slide' => t('Vertical Slide'),
      'horizontal' => t('Horizontal Slide'),
      'myslide' => t('Scroll Down'),
    ),
    '#description' => t('Effect to use when slides are changine.'),
  );

  $form['ajax_slideshow_slide_duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Slide duration'),
    '#default_value' => variable_get('ajax_slideshow_slide_duration', 5000),
    '#description' => t('Specify here the duration for each slide to appear (in miliseconds).'),
  );

  $form['ajax_slideshow_effect_duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Effect duration'),
    '#default_value' => variable_get('ajax_slideshow_effect_duration', 1000),
    '#description' => t('If fade / scroll effect, specify here the effect duration (in miliseconds).'),
  );

  $form['ajax_slideshow_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Slideshow Height'),
    '#default_value' => variable_get('ajax_slideshow_height', 500),
    '#description' => t('Specify here the viewport height. Nodes higher then that will be partially hidden'),
  );

  $form['ajax_slideshow_show_tabs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Tabs'),
    '#default_value' => variable_get('ajax_slideshow_show_tabs', true),
    '#description' => t('Specify here whether the slideshow has tabs or not.'),
  );

  $form['ajax_slideshow_show_nav_buttons'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Navigation Buttons'),
    '#default_value' => variable_get('ajax_slideshow_show_nav_buttons', true),
    '#description' => t('Specify here whether the slideshow has navigational buttons or not.'),
  );

  $form['ajax_slideshow_enum_tabs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enumerate Tabs'),
    '#default_value' => variable_get('ajax_slideshow_enum_tabs', false),
    '#description' => t('Enumerate tabs instead of presenting the tabs selected fields at the view.'),
  );

  $form['ajax_slideshow_show_border'] = array(
    '#type' => 'checkbox',
    '#title' => t('Slideshow Border'),
    '#default_value' => variable_get('ajax_slideshow_show_border', true),
    '#description' => t('Show border around the slideshow.'),
  );

  $form['ajax_slideshow_content_source'] = array(
    '#type' => 'select',
    '#title' => t('Content Source'),
    '#default_value' => variable_get('ajax_slideshow_content_source','node_based'),
    '#options' => array(
      'node_based' => t('Node Based'),
      'views_based' => t('Views Based'),
    ),
    '#description' => t('Retrieving the content can be either based on the node module apis or the views module apis. When in views mode the user may choose the specific content fields.'),
  );

  $form['ajax_slideshow_show_teaser'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Node Teaser'),
    '#default_value' => variable_get('ajax_slideshow_show_teaser', false),
    '#description' => t('Show node teaser instead of full node. This setting is only relevant for Node-Based content Source.'),
  );

  $form['ajax_slideshow_advanced_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#description' => t('The below settings may help in fine tuning the slideshow for smooth transitions. Make changes to these settings only if transitions are jumpy.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,    
  );

  $form['ajax_slideshow_advanced_settings']['ajax_slideshow_perform_preloading'] = array(
    '#type' => 'checkbox',
    '#title' => t('Perform Preloading'),
    '#default_value' => variable_get('ajax_slideshow_perform_preloading', true),
    '#description' => t('Turn on/off the ajax preloader. By default turned on which means preloading of the nodes is done in parallel to the slideshow progress. This is done to ensure smoother slide changes.'),
  );

  $form['ajax_slideshow_advanced_settings']['ajax_slideshow_preloading_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Preloader intervals'),
    '#default_value' => variable_get('ajax_slideshow_preloading_threshold', 1000),
    '#description' => t('Sets the preloader ajax calls intervals. Slower sites should increase this settings or else to many simultaneous calls will be spawned and the slides transitions may get jumpy . Note though that slide duration must be bigger than this settings.'),
  );

  $form['ajax_slideshow_advanced_settings']['ajax_slideshow_sync_ajax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Synchronous Ajax'),
    '#default_value' => variable_get('ajax_slideshow_sync_ajax', true),
    '#description' => t('Ajax calls for non preloaded nodes are synchronous by default (i.e. calls generated by user activity). This means smoother transition effect on the one hand but tab slower response time on the other hand.'),
  );


  return system_settings_form($form);
}

/** Admin settings validations
 * 
 * @param object $form
 * @param object $form_state
 * @return 
 */
function ajax_slideshow_admin_settings_validate($form,&$form_state){
  if ($form_state['values']['ajax_slideshow_slide_duration']<$form_state['values']['ajax_slideshow_effect_duration']){
    form_set_error('ajax_slideshow_slide_duration', t('Slide duration must be longer than the effect duration.'));
  }
  if ($form_state['values']['ajax_slideshow_slide_duration']<$form_state['values']['ajax_slideshow_preloading_threshold']){
    form_set_error('ajax_slideshow_slide_duration', t('Slide duration must be longer than the preloader intervals.'));
  }
  if ($form_state['values']['ajax_slideshow_slide_duration']<1000){
    drupal_set_message(t('Slide duration smaller than 1 second is not recommended.'), 'warning');
  }
  
}

/**
 * callback function for showing the slideshow page
 * @return the slide show page themed contents.
 */
function ajax_slideshow_view($is_block = false) {
  $path = drupal_get_path('module', 'ajax_slideshow');
  jquery_plugin_add('tabs');
  drupal_add_js($path.'/ajax_slideshow.js');
  drupal_add_css($path.'/ajax_slideshow.css');
  if (variable_get('ajax_slideshow_height', 500) != ''){
    $slideshow_height = variable_get('ajax_slideshow_height', 500).'px';
    $nav_height = (variable_get('ajax_slideshow_height', 500)*.6).'px';
    drupal_set_html_head("<style type='text/css'>div.as-panes {height: $slideshow_height}</style>");
    drupal_set_html_head("<style type='text/css'>a.prev,a.next {margin-top: $nav_height}</style>");
  }
  $js_settings = array(
    effect => variable_get('ajax_slideshow_effect','myfade'),
    slide_duration => variable_get('ajax_slideshow_slide_duration', 5000),
    effect_duration => variable_get('ajax_slideshow_effect_duration', 1000),
    perform_preloading => variable_get('ajax_slideshow_perform_preloading', true),
    preloading_threshold => variable_get('ajax_slideshow_preloading_threshold', 1000),
    sync_ajax => variable_get('ajax_slideshow_sync_ajax', true),
  );
  drupal_add_js(array('ajax_slideshow' => $js_settings), 'setting');

  // Arguments support - contributed by AndyF - http://drupal.org/node/831586 
  $arguments = array();
  if ((!$is_block) && (variable_get('ajax_slideshow_content_source','node_based') == 'node_based')){
    // Pass on the URL arguments to the view. This assumes that the first path
    // argument is the slideshow path, and the other path args are for the view.    
    $arguments = explode('/', $_GET['q']);
    array_shift($arguments);  // Remove slideshow path
  }
  array_unshift($arguments, 'ajax_slideshow_view', 'default');
  $tabs_view = call_user_func_array('views_embed_view', $arguments);

  return theme('ajax_slideshow', $tabs_view);
}

/**
 * Hook theme for setting up the theme function
 * @param object $existing
 * @param object $type
 * @param object $theme
 * @param object $path
 * @return 
 */
function ajax_slideshow_theme($existing, $type, $theme, $path){

  $templates = array(
    // set the module's main theme fucntion
    'ajax_slideshow' => array (
      'arguments' => array('tabs_view' => NULL) 
    ),
    // set the main view template override - see http://drupal.org/node/627378#comment-3060486
    'views_view_list__ajax_slideshow_view__default' => array(
      'path' => $path.'/templates',
      'template' => 'views-view-list--ajax-slideshow-view--default',
      'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'original hook' => 'views_view_list',
    ),
  );
  return $templates;
}

/**
 * The themeing function. Copy and adjust at your theme level as needed.
 * @return 
 */
function theme_ajax_slideshow($tabs_view){
    if (!variable_get('ajax_slideshow_show_tabs', true)){
      $hide_tabs = ' style="display:none"';
    } 
    if (!variable_get('ajax_slideshow_show_nav_buttons', true)){
      $hide_nav_buttons = ' style="display:none"';
    }
    if (variable_get('ajax_slideshow_show_border', true)){
      $show_border = ' as-panes-border';
    }
    $output = '<div class="ajax_slideshow">';
    $output .= '<a class="prev"'.$hide_nav_buttons.'>prev</a>';
    $output .= '<div class="as-tabs-panes">';
    $output .= '<div class="as-tabs"'.$hide_tabs.'>'.$tabs_view.'</div>';
    $output .= '<br style="clear:both"/>';
    $output .= '<div class="as-panes'.$show_border.'"></div>';
    $output .= '</div>';
    $output .= '<a class="next"'.$hide_nav_buttons.'>next</a>'; 
    $output .= '</div>';
    return $output;
}

/** 
* Content retrieving via ajax. content may be retrieved using the node api or the view api (depending on the user choice of full-node/fields
*/ 
function ajax_slideshow_get_node_ajax($nid) {
  
  if (variable_get('ajax_slideshow_content_source','node_based') == 'node_based'){
    // node-based content
    $node = node_load(array('nid' => $nid)); 
    if (node_access('view', $node)) {
      $output = node_view($node, variable_get('ajax_slideshow_show_teaser', false));
      print drupal_to_js(array('node' => $output));
    } 
    else {
      print drupal_to_js(array('node' => t('Access Denied')));
      watchdog('access denied', t('Access denied to requested node !nid by ajax_slideshow module.', array('!nid' => $node->nid)));
    }
  } else {
    // view-based content
    $content_view = call_user_func_array('views_embed_view', array('ajax_slideshow_view', 'block_2', $nid));
    print drupal_to_js(array('node' => $content_view));
  }
}

/** hook_block implementation
 * 
 * @param object $op [optional]
 * @param object $delta [optional]
 * @param object $edit [optional]
 * @return 
 */
function ajax_slideshow_block($op = 'list', $delta = 0, $edit = array()) {
  $blocks = array();
  if ($op == 'view') {
    $blocks['content'] = ajax_slideshow_view(true);
    return $blocks;
  }
  elseif ($op == 'list') {
    $blocks[0]['info'] = t('Ajax Slideshow Block');
    $blocks[0]['cache'] = BLOCK_NO_CACHE;
    return $blocks;
  }
  elseif ($op == 'configure') {
    $form = array();
    return $form;
  }
  elseif ($op == 'save') {
    return;
  }
}

/** Removing some of the options for fields configuration when in the tabs display to prevent breakdown of the code (specifically removing any linking option).
 * 
 * @param object $form
 * @param object $form_state
 * @param object $form_id
 * @return 
 */
function ajax_slideshow_form_alter(&$form, &$form_state, $form_id){
  if (($form_id == 'views_ui_config_item_form') && ($form_state['view']->name == 'ajax_slideshow_view') && ($form_state['view']->current_display == 'default')){
    unset($form['options']['link_to_node']);
    unset($form['options']['alter']['make_link']);
    unset($form['options']['alter']['path']);
    unset($form['options']['alter']['link_class']);
    unset($form['options']['alter']['alt']);
    unset($form['options']['alter']['prefix']);
    unset($form['options']['alter']['suffix']);
    unset($form['options']['alter']['target']);
    unset($form['options']['alter']['help']['#dependency']['edit-options-alter-make-link']);
  }
}